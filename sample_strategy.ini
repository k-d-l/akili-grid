# This file contains the various settings for the grid strategy. All prices are on the base currency 
# e.g with BTC/USDT the base currency is BTC. Each setting is preceded by a comment explaining what it does. 
# This grid only uses limit orders.
# All settings are in this file and are mandatory and in lowercase

# I have marked certain parameters with ** HIGH FREQUENCY WARNING ** where the settings can create
# what I am calling a high frequency trading grid. i.e orders will be hit in quick succession
# Be wary of exchange fees on high frequency grids or use an exchange that has zero limit fees.

#[type] section contains "basic" grid details
[type]
# Name your grid. Useful when you have several grids running and they are all updating you via Telegram
# I'll most likely think of other uses for this, such as a central web interface maybe?
name = JangitaðŸ“ˆ
# Type of order to be placed above current price. Can be buy or sell.
above = sell
# Type of order to be placed below current price. Can be buy or sell.
below = buy
# Specify leverage of grid (if using futures).
leverage = 3
# Specify market in exchange to use (BTC/USDT BTC-PERP etc).
market = SOL-PERP

# The [orders] section specifies how many active orders to maintain on the exchange
# 1 above and 1 below works for most cases unless the grid is very tight or the asset is
# very volatile and the script can't keep up creating new orders once the ones- on the
# exchange are filled
[orders]
# Total number of active orders above current price.
above = 1
# Total number of active orders above current price.
below = 1
# Order size of each grid in base currency. ** HIGH FREQUENCY WARNING ** 
size = 0.3

# The [bounds] section define the upper and lower limit of the grid. You can have infinite grids
# by specifying zero for low and a very nigh number for buy. Just make sure you have enough
# funds for this
[bounds]
# Lowest grid price to place orders or 0 to place orders all the way down to zero.
low = 30
# Highest grid price to place orders. For infinite grid, place a large number here like 999999999.
high = 40
# Price difference between grid orders (cannot be zero) in base currency. ** HIGH FREQUENCY WARNING ** 
step = 0.05

# Unlike most grids out there, this grid starts with a start order which is placed either below or above
# the current base price. When this order is filled, the grid is set up.
# The purpose of this order is to pre-buy before the grid starts for a long or bullish grid or 
# to pre-sell for a short, or bearish grid. This avoids the grid running out of tokens to sell or buy if
# the price moves in a favourable direction
[start]
# Grid gets activated when price goes below this. For immediate activation place a super large number here.
low = 0
# Grid gets activated when price goes above this setting or 0 to activate immediately.
high = 30
# Amount of crypto in base currency for starting order. Use for bullish or bearish grids. 
# If equal to grid order size then it is a neutral grid.
amount = 0.3
# Order type to start grid with Can be buy or sell.
order = buy
# Location to place starting order - above or below current price. 
# Generally if the start order is buy, the location is below and if it is sell, the location is above current price.
location = below

[stop]
# Grid stops when price goes below this setting.
low = 0
# Grid stops when price goes above this setting.
high = 1000000
# If set to yes, active position will be closed grid stops.
close = no
# How long to run bot in seconds.
time = 3600


# For the below, I'm still debating weather to use this INI or environment variables
# I'll probably put all settings in this file including exchange shenanigans when I release the first version.
# For now, use Environment variables if you dare to run the grid ðŸ¤£ and that makes development easier

[exchange]
# Specify exchange to use use the id column of the table that can be found here:
# https://github.com/ccxt/ccxt/wiki/Exchange-Markets
name = ftx
# Placeholder for now... place the value in an environment variable called exchange.apikey
apikey =
# Placeholder for now... place the value in an environment variable called exchange.secret
secret = 

[telegram] 
# Place your telegram bot token here. To create a bot have a look at:
# https://core.telegram.org/bots#how-do-i-create-a-bot 
# If any of these are blank, telegram will be disabled do not include the initial bot letters
# Placeholder for now... place the value in an environment variable called telegram.bottoken
bottoken =
# Your telegram (or your group's chat ID) to receive updates. To get your ID see:
# https://diyusthad.com/2022/03/how-to-get-your-telegram-chat-id.html 
# Placeholder for now... place the value in an environment variable called telegram.chatid
chatid =